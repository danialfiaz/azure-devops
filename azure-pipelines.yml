# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: 'aks-cluster-self-hosted' #'aks-private'

variables: 
- group: 'Azure-cloud-secrets'

steps:

  - task: Bash@3
    displayName: 'Configuring azure cli'
    inputs:
      filePath: 'scripts/azure-cli.sh'
      #workingDirectory: "scripts/azure-cli.sh"
          
  - task: AzureCLI@2
    displayName: 'Import image to Azure Container Registry'
    inputs:
      azureSubscription: 'aks-cluster'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # #az --version
        # az aks get-credentials --resource-group terraform-rg --name aks-cluster
        # kubectl get pods
        az acr import --name $(acr_registry) --source $(SOURCE_REGISTRY)/$(CONTROLLER_IMAGE):$(CONTROLLER_TAG) --image $(CONTROLLER_IMAGE):$(CONTROLLER_TAG)
        az acr import --name $(acr_registry) --source $(SOURCE_REGISTRY)/$(PATCH_IMAGE):$(PATCH_TAG) --image $(PATCH_IMAGE):$(PATCH_TAG)
        az acr import --name $(acr_registry) --source $(SOURCE_REGISTRY)/$(DEFAULTBACKEND_IMAGE):$(DEFAULTBACKEND_TAG) --image $(DEFAULTBACKEND_IMAGE):$(DEFAULTBACKEND_TAG)
        az acr login --name $(acr_registry) --expose-token

  - task: Bash@3
    displayName: 'Installing Helm'
    inputs:
      filePath: 'scripts/install-helm.sh'
      #workingDirectory: "scripts/install-helm.sh"

  - task: Bash@3
    displayName: 'Installing Kubectl'
    inputs:
      filePath: 'scripts/install-kubectl.sh'
      #workingDirectory: "scripts/install-kubectl.sh"

  - task: AzureCLI@2
    displayName: 'get credentials'
    inputs:
      azureSubscription: 'aks-cluster'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # az --version
         az aks get-credentials --resource-group terraform-rg --name aks-cluster
         kubectl get pods -n ingress-basic

  - task: Bash@3
    displayName: 'Configuring Ingress controller'
    inputs:
      filePath: 'scripts/ingress-controller.sh'
      arguments: 'nginx-ingress $(ACR_LOGIN_SERVER) ingress-basic'
      #workingDirectory: "scripts/ingress-controller.sh"


  - task: AzureCLI@2
    displayName: 'Configuring sample application'
    inputs:
      azureSubscription: 'aks-cluster'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks get-credentials --resource-group terraform-rg --name aks-cluster
        kubectl apply -f  scripts/aks-helloworld-one.yaml --namespace ingress-basic
        kubectl apply -f  scripts/aks-helloworld-two.yaml --namespace ingress-basic
        kubectl apply -f scripts/hello-world-ingress.yaml --namespace ingress-basic
      #workingDirectory: "scripts/"
